name: Frontend CI

on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/ci.yml'
      - 'frontend/.github/workflows/ci.yml'
    branches: [main, develop, dev, feature/**, bugfix/**]
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/ci.yml'
      - 'frontend/.github/workflows/ci.yml'
    branches: [main, develop, dev, feature/**, bugfix/**]

env:
  NODE_VERSION: 20.x

jobs:
  lint:
    name: Lint (ESLint/Prettier)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run check-types

  test:
    name: Unit & UI Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests (Vitest)
        run: npm run test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build (Vite)
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  # Optionally, add a job for e2e or integration tests here

  # Optionally, add a job for deploy (manual/auto) here

# Notes:
# - This workflow is for the React frontend (Vite + TypeScript).
# - Lint, typecheck, test, and build are all required for a green pipeline.
# - Coverage is uploaded as an artifact for later inspection.
# - Build output is uploaded as an artifact for deployment or further steps.
# - See infrastructure/README.md for Docker and local dev instructions.
# - See MATRIZ_EQUIVALENCIA.md for mapping Delphi â†’ React/Java.

# For backend CI, see backend/.github/workflows/ci.yml

# For environment variables, see frontend/.env.example

# For migration/architecture notes, see README.md and MATRIZ_EQUIVALENCIA.md

# For test coverage requirements, see business rule and README.md

# For i18n, set VITE_I18N_ENABLED=true in .env if needed

# For further customization, see package.json scripts and Vite config

# End of file